import("types.nools");

// Some production rules for the Mendel Abductive Reasoning Tutor


//--------------------------------------------------------------------------------------------
//
// Functions
//
function removeDuplicates(l) {
	var ret = [];
	if (!(l instanceof Array) || l.length === 0) {
		return l;
	}
	for (var i = 0; i < l.length; i++) {
		if (ret.indexOf(l[i]) < 0) {
			ret.push(l[i]);
		}
	}
	return ret;
}

//--------------------------------------------------------------------------------------------
//
// Initializing working memory
//
// This rule does not require further work from you.
//
//--------------------------------------------------------------------------------------------
rule bootstrap {
	when {
		b: Boolean b === true from true;
	}
	then {
		assert(new TPA("problemstatement", "UpdateTextArea", probtxt));
		assert(new TPA("strain1", "UpdateTextField", strain1.name));
		assert(new TPA("strain2", "UpdateTextField", strain2.name));
		assert(new TPA("strain3", "UpdateTextField", strain3.name));
	
		assert(new Strain(strain1.name, strain1.n, strain1.phenotype, "concPartStr1", "concFinalStr1"));
		assert(new Strain(strain2.name, strain2.n, strain2.phenotype, "concPartStr2", "concFinalStr2"));
		assert(new Strain(strain3.name, strain3.n, strain3.phenotype, "concPartStr3", "concFinalStr3"));
	
		assert(new Cross("cross1", cross1.strains, cross1.offspringExt, cross1.offspringInt));
		assert(new Cross("cross2", cross2.strains, cross2.offspringExt, cross2.offspringInt));
		assert(new Cross("cross3", cross3.strains, cross3.offspringExt, cross3.offspringInt));
		assert(new Cross("cross4", cross4.strains, cross4.offspringExt, cross4.offspringInt));
		assert(new Cross("cross5", cross5.strains, cross5.offspringExt, cross5.offspringInt));
		assert(new Cross("cross6", cross6.strains, cross6.offspringExt, cross6.offspringInt));
		
		var crossName, rowNames = [];
		for (var i = 1; i < 7; i++) {
			crossName = "Cr"+i;
			rowNames.push(crossName+"Row");
			assert(new interfaceElement(crossName+"Str1", null));
			assert(new interfaceElement(crossName+"Str2", null));
			assert(new interfaceElement(crossName+"Offspring", null));
			assert(new interfaceRow(crossName+"Row", [crossName+"Str1",crossName+"Str2"], crossName+"Offspring")); 
		}
		
		var intElPartName, intElFinalName;
		for (var i = 1; i < 4; i++) {
			intElPartName = "concPartStr"+i;
			intElFinalName = "concFinalStr"+i;
			assert(new interfaceElement(intElPartName, null));
			assert(new interfaceElement(intElFinalName, null));
		}
		
		assert(new Problem(probname, [strain1.name, strain2.name, strain3.name], rowNames, [strain1.phenotype, strain2.phenotype, strain3.phenotype]));

	
		setProblemAttribute("use_backtracking", true);
		halt();
	}
}

//--------------------------------------------------------------------------------------------
//
// Rules for the selectCross subgoal
//
// Note: The rules for this subgoal are complete. You should not need more rules and you should
//		not need to change the current rules for this subgoal.
//
//--------------------------------------------------------------------------------------------

// selectFirstStrain
// IF there is a selectCross subgoal
//    AND we have not selected the first strain for the current cross yet
//    AND s is a Strain for which we have at least one remaining (untried) cross
//            (call its name s1)
//            (at this point we care not what that untried cross is, only that is exists)
//    AND intRow is (the fact representing) the next unused row  in the interface
//    AND ie is one of the open input fields (for entering a strain) in that row
//  THEN
//     Write s1 into ie  (i.e., select s as one of the strains to be used in the next cross)
//     AND update the semantic representation of the problem (by storing in s1 in
//     the firstStrainCurCross slot)
//
rule selectFirstStrain {
	when {
		prob: Problem prob.subgoal === "selectCross" && !prob.firstStrainCurCross && 
				prob.interfaceRows {interfaceRows: intRows};
		s: Strain {name: s1};
		exists(c: Cross s1 in c.strains);
		intRow: interfaceRow intRow.name === intRows[0] {iesStrains: intRowStrains};
		ie: interfaceElement !ie.value && ie.name in intRowStrains {name: selection};
	}
	then {
		if (checkSAI({selection: selection, action: "UpdateTextField", input: s1})) {
			modify(prob, "firstStrainCurCross", s1);
			modify(ie, "value", s1);
			halt();
		} else {
			backtrack();
		}
	}
}
// Notes re selectFirstStrain
// 1. The Nools construct "exists" (wrapped around a constraint) tests whether there is at
//    least one way of satisfying the constraint, without generating a seperate (partial) 
//    activation

// Questions to help you understand the rule selectFirstStrain (Note: these questions
//		may gradually become clear as you work on the model.  Same for the questions about
//		other rules.)
// 1. Does this rule allow students to first enter a strain in the second input field of a
//    rowfirst (i.e., before entering one in the first field)? How, or how not?
// 2. Does this rule allow students to skip rows of input fields? How or how not?
// 3. Why does the rule not "remember"  (i.e., store in an appropriate place in WM) which 
//    of the remaining untried crosses is matched?
// 4. (Challenging but important): How does this rule allow (or model) entering a new cross
//    only when all inferences that can be drawn from the previous cross have been entered 
//    into the tutor interface? I.e., what rule condition ensures that the rule does not 
//    match when there are still more inferences to be written? (Note: this behavior will
//    also depend on other rules that you will need to write.)
//


// selectSecondStrainDiff
// IF there is a selectCross subgoal
//    AND we have selected the first strain for the current cross (with name s1)
//    AND str2 is a Strain different from s1 (call its name s2)
//    AND c is an (untried) cross with s1 and s2 as the strains
//    AND r is (the fact representing) the first not-fully-completed row in the
//              interface
//    AND ie2 is (a fact representing) an open input field (for entering a strain) in row r
//	  AND ie3 is (the fact representing) the result field (or offspring field) in row r
//  THEN
//     Write s2 into ie2  (i.e., select s2 as the second strain used in the next cross)
//     AND (as tutor-performed action) write the offspring into ie3 and lock ie3
//     AND Update the semantic representation of the problem by
//			a. setting the slot firstStrainCurCross to null
//			b. deleting the first entry from its interfaceRows slot (so this slot always
//					lists only the unused rows)
//			c. store c's name in  the curCross slot (needed later for making inferences)
//     AND move on to the next subgoal (i.e., set prob's subgoal slot to "inferFromCross")
//
rule selectSecondStrainDiff {
	when {
		prob: Problem prob.subgoal === "selectCross" && prob.firstStrainCurCross  && 
				prob.interfaceRows {interfaceRows: intRows, firstStrainCurCross: s1};
		str2: Strain str2.name !== s1 {name: s2};
		c: Cross s1 in c.strains && s2 in c.strains {offspringExt: o};
		r: interfaceRow r.name === intRows[0] {iesStrains: intRowStrains, ieResult: sel3};
		ie2: interfaceElement !ie2.value && ie2.name in intRowStrains {name: sel2};
		ie3: interfaceElement ie3.name === sel3;
	}
	then {
		if (checkSAI({selection: sel2, action: "UpdateTextField", input: s2})) {
			modify(ie2, "value", s2);
			assert(new TPA(sel3, "UpdateTextField", o));
			assert(new TPA(sel3, "lock", true));
			modify(prob, "firstStrainCurCross", null);
			modify(prob, "interfaceRows", intRows.slice(1));
			modify(prob, "curCross", c.name);
			modify(prob, "subgoal", "inferFromCross");
//			halt();     // highly unusual!
		} else {
			backtrack();
		}
	}
}
// Notes re selectSecondStrainDiff
// 1. The Javascript function "slice" (used  on the rhs of this rule) is used to take a 
//          slice of an Array; if you do not know this function, you might quickly look up
//          some Javascript documentation
//
// Questions to help your understanding of rule selectSecondStrainDiff
// 1. How does this rule prevent selecting a cross that already has been tried? (Note: this 
//			behavior also depends on other rules you will need to write.)
// 2. Why is it useful to set the firstStrainCurCross to null? (Hint: think of subsequent
//			crosses the student might want to explore.)
// 3. Why does this rule delete the entry from the prob's interfaceRows?
// 4. Why does the rule not halt() upon finding that its observable action equals that
//			of the student?   What is it that we want to happen "further down the chain?"


// selectSecondStrainSame (for self-crosses)
// IF there is a selectCross subgoal
//    AND we have selected the first strain for the current cross (with name s1)
//    AND c is an (untried) cross with s1 and s1 as the strains (i.e., crossing s1
//			with itself)
//    AND r is (the fact representing) the first not-fully-completed row in the
//              interface
//    AND ie2 is (a fact representing) an open input field (for entering a strain) in row r
//	  AND ie3 is (the fact representing) the result field (or offspring field) in row r
//  THEN
//     Write s1 into ie2  (i.e., select s1 as the second strain used in the next cross)
//     AND (as tutor-performed action) write the offspring into ie3 and lock ie3
//     AND Update the semantic representation of the problem by
//			a. setting the slot firstStrainCurCross to null
//			b. deleting the first entry from its interfaceRows slot (so this slot always
//					lists only the unused rows)
//			c. store c's name in  the curCross slot (needed later for making inferences)
//     AND move on to the next subgoal (i.e., set prob's subgoal slot to "inferFromCross")
//
rule selectSecondStrainSame {
	when {
		prob: Problem prob.subgoal === "selectCross" && prob.firstStrainCurCross  && 
				prob.interfaceRows {interfaceRows: intRows, firstStrainCurCross: s1};
		c: Cross c.strains[0] === s1 && c.strains[1] === s1 {offspringExt: o};
		r: interfaceRow r.name === intRows[0] {iesStrains: intRowStrains, ieResult: sel3};
		ie2: interfaceElement !ie2.value && ie2.name in intRowStrains {name: sel2};
		ie3: interfaceElement ie3.name === sel3;
	}
	then {
		if (checkSAI({selection: sel2, action: "UpdateTextField", input: s1})) {
			modify(ie2, "value", s1);
			assert(new TPA(sel3, "UpdateTextField", o));
			assert(new TPA(sel3, "lock", true));
			modify(prob, "firstStrainCurCross", null);
			modify(prob, "interfaceRows", intRows.slice(1));
			modify(prob, "curCross", c.name);
			modify(prob, "subgoal", "inferFromCross");
//			halt();    // highly unusual!
		} else {
			backtrack();
		}
	}
}
// Notes re selectSecondStrainSame
// 1. Note the right-hand side is virtually identical to that of selectSecondStrainDiff.
//		Generally, such duplication is to be avoided in software engineering (Jonathan would
//		cringe at this rule) but I found it easier to express the lhs separately for the 
//		Same and Diff cases, rather than combine them in a single rule. (But of course 
//		writing a single rule can be done.)


//--------------------------------------------------------------------------------------------
//
// Rules for the inferFromCross subgoal
//
// You will need to write more rules for this subgoal.
//
//--------------------------------------------------------------------------------------------

// dummyInferFromCrossRule
// IF there is an inferFromCross subgoal
//	  AND c is the current Cross
//    AND    < other conditions regarding c>
// THEN
//    < make inferences just from the results of c>
//    AND remove c from prob's curCross slot
//    AND retract c from working memory
//    AND set the subgoal to makeInferences

// If there is an inferFromCross subgoal
// 	AND c is the current cross
//  AND 

rule sameStrain100 {
	when {
		prob: Problem prob.subgoal === "inferFromCross" {curCross: cName};
		c: Cross c.name === cName && c.strains[0] == c.strains[1]  && c.offspringInt[0] == 100 {strains: crossStrains};
		str1: Strain str1.name == crossStrains[0];
	}
	then {
		// Only need to write new partial conclusion if there wasn't already one (b/c interface locks you out from re-rentering it)
		if (str1.partialConclusions.length == 0) {
			modify(str1, "needToWritePartialConclusion", true);
		}
		let partialConclusions = str1.partialConclusions;
		partialConclusions.push("homozygous");
		modify(str1, "partialConclusions", partialConclusions);
		modify(prob, "curCross", null);
		retract(c);
		modify(prob, "subgoal", "makeInferences");
	}
}
rule sameStrain75 {
	when {
		prob: Problem prob.subgoal === "inferFromCross" {curCross: cName};
		c: Cross c.name === cName && c.strains[0] == c.strains[1]  && (c.offspringInt[0] == 75 || c.offspringInt[0] == 25) {strains: crossStrains};
		str1: Strain str1.name == crossStrains[0];
	}
	then {
		modify(str1, "finalConclusion", "heterozygous");
		modify(prob, "dominantPhenotype", str1.phenotype);
		let otherPhenotype = null;
		if (c.offspringInt[1] != str1.phenotype) {
			otherPhenotype = c.offspringInt[1];
		} else {
			otherPhenotype = c.offspringInt[3];
		}
		modify(prob, "recessivePhenotype", otherPhenotype);
		modify(prob, "curCross", null);
		retract(c);
		modify(prob, "subgoal", "makeInferences");
	}
}
rule diffStrainSamePheno75 {
	when {
		prob: Problem prob.subgoal === "inferFromCross" {curCross: cName};
		c: Cross c.name === cName  && c.strains[0] != c.strains[1] && (c.offspringInt[0] == 75 || c.offspringInt[0] == 25) {strains: crossStrains};
		str1: Strain str1.name == crossStrains[0];
		str2: Strain str2.name == crossStrains[1] && str1.phenotype == str2.phenotype;
	}
	then {
		modify(str1, "finalConclusion", "heterozygous");
		modify(str2, "finalConclusion", "heterozygous");
		modify(prob, "dominantPhenotype", str1.phenotype);
		if (c.offspringInt[1] != str1.phenotype) {
			otherPhenotype = c.offspringInt[1];
		} else {
			otherPhenotype = c.offspringInt[3];
		}
		modify(prob, "recessivePhenotype", otherPhenotype);
		modify(prob, "curCross", null);
		retract(c);
		modify(prob, "subgoal", "makeInferences");
	}
}
rule diffStrainDiffPheno100 {
	when {
		prob: Problem prob.subgoal === "inferFromCross" {curCross: cName};
		c: Cross c.name === cName  && c.strains[0] != c.strains[1] && c.offspringInt[0] == 100 {strains: crossStrains};
		str1: Strain str1.name == crossStrains[0];
		str2: Strain str2.name == crossStrains[1] && str1.phenotype != str2.phenotype;
	}
	then {
		// Identify which strain has same phenotype as offspring: this is dominant
			// First crossed strain is homozygous dominant
		if (str1.phenotype == c.offspringInt[1]) {
			modify(str1, "finalConclusion", "homozygous dominant");
			modify(str2, "finalConclusion", "homozygous recessive");

			// Capture which phenotypes are dominant or recessive
			modify(prob, "dominantPhenotype", str1.phenotype);
			modify(prob, "recessivePhenotype", str2.phenotype);
			// First crossed strain is homozygous recessive
		} else {
			modify(str1, "finalConclusion", "homozygous recessive");
			modify(str2, "finalConclusion", "homozygous dominant");
			// Capture which phenotypes are dominant or recessive
			modify(prob, "dominantPhenotype", str2.phenotype);
			modify(prob, "recessivePhenotype", str1.phenotype);
		}
		modify(prob, "curCross", null);
		retract(c);
		modify(prob, "subgoal", "makeInferences");
	}
}
rule diffStrainDiffPheno50 {
	when {
		prob: Problem prob.subgoal === "inferFromCross" {curCross: cName};
		c: Cross c.name === cName  && c.strains[0] != c.strains[1] && c.offspringInt[0] == 50 {strains: crossStrains};
		str1: Strain str1.name == crossStrains[0];
		str2: Strain str2.name == crossStrains[1] && str1.phenotype != str2.phenotype;
	}
	then {
		// If the strains don't have partial conclusions, we will need to write them in the interface
		if (str1.partialConclusions.length == 0) {
			modify(str1, "needToWritePartialConclusion", true);
		}
		if (str2.partialConclusions.length == 0) {
			modify(str2, "needToWritePartialConclusion", true);
		}
		// Either way, add the new partial conclusions to the list
		let str1Partials = str1.partialConclusions;
		str1Partials.push("homozygous recessive or heterozygous");
		modify(str1, "partialConclusions", str1Partials);

		let str2Partials = str2.partialConclusions;
		str2Partials.push("homozygous recessive or heterozygous");
		modify(str2, "partialConclusions", str2Partials);

		modify(prob, "curCross", null);
		retract(c);
		modify(prob, "subgoal", "makeInferences");
	}
}
// This rule makes no conclusions
rule diffStrainSamePheno100 {
	when {
		prob: Problem prob.subgoal === "inferFromCross" {curCross: cName};
		c: Cross c.name === cName  && c.strains[0] != c.strains[1] && c.offspringInt[0] == 100 {strains: crossStrains};
		str1: Strain str1.name == crossStrains[0];
		str2: Strain str2.name == crossStrains[1] && str1.phenotype == str2.phenotype;
	}
	then {
		modify(prob, "curCross", null);
		retract(c);
		modify(prob, "subgoal", "makeInferences");
	}
}

// rule dummyInferFromCrossRule {
// 	when {
// 		prob: Problem prob.subgoal === "inferFromCross" {curCross: cName};
// 		c: Cross c.name === cName {strains: crossStrains};
// 		str1: Strain str1.name == crossStrains[0];
// 		str2: Strain str2.name == crossStrains[1];
// 	}
// 	then {

// 		//Determine Inferences
// 		// Self Cross
// 		if (c.strains[0] == c.strains[1]) {
// 			// Both heterozygous
// 			let otherPhenotype = null;
// 			switch (c.offspringInt[0]) {
// 				case 25:
// 				case 75:
// 					modify(str1, "finalConclusion", "heterozygous");
// 					modify(prob, "dominantPhenotype", str1.phenotype);
// 					if (c.offspringInt[1] != str1.phenotype) {
// 						otherPhenotype = c.offspringInt[1];
// 					} else {
// 						otherPhenotype = c.offspringInt[3];
// 					}
// 					modify(prob, "recessivePhenotype", otherPhenotype);
// 					break;
// 				// Partial conclusion: homozygous
// 				case 100:
// 					let partialConclusions = str1.partialConclusions;
// 					partialConclusions.push("homozygous");
// 					modify(str1, "partialConclusions", partialConclusions);
// 					modify(str1, "needToWritePartialConclusion", true);
// 					break;
// 			}
// 		// Cross of two different strains
// 		} else {
// 			switch (c.offspringInt[0]) {
// 				// Both Heterozygous
// 				case 25:
// 				case 75:
// 					modify(str1, "finalConclusion", "heterozygous");
// 					modify(str2, "finalConclusion", "heterozygous");
// 					modify(prob, "dominantPhenotype", str1.phenotype);
// 					if (c.offspringInt[1] != str1.phenotype) {
// 						otherPhenotype = c.offspringInt[1];
// 					} else {
// 						otherPhenotype = c.offspringInt[3];
// 					}
// 					modify(prob, "recessivePhenotype", otherPhenotype);					
// 					break;
// 				// Partial Conclusions for both strains: homo-recessive, or heterozygous
// 				case 50:
// 					// Identify previous partial conclusions
// 					let str1Partials = str1.partialConclusions;
// 					let str2Partials = str2.partialConclusions;
// 					// Add new partial conclusions
// 					str1Partials.push("homozygous recessive or heterozygous");
// 					str2Partials.push("homozygous recessive or heterozygous");
// 					modify(str1, "partialConclusions", str1Partials);
// 					modify(str2, "partialConclusions", str2Partials);
// 					// Denote that partial conclussions need to be written
// 					modify(str1, "needToWritePartialConclusion", true);
// 					modify(str2, "needToWritePartialConclusion", true);
// 					break;
// 				// Depends
// 				case 100:
// 					// Can only make conclusion if strains are different phenotypes
// 					if (str1.phenotype != str2.phenotype) {
// 						// Identify which strain has same phenotype as offspring: this is dominant
// 							// First crossed strain is homozygous dominant
// 						if (str1.phenotype == c.offspringInt[1]) {
// 							modify(str1, "finalConclusion", "homozygous dominant");
// 							modify(str2, "finalConclusion", "homozygous recessive");

// 							// Capture which phenotypes are dominant or recessive
// 							modify(prob, "dominantPhenotype", str1.phenotype);
// 							modify(prob, "recessivePhenotype", str2.phenotype);
// 							// First crossed strain is homozygous recessive
// 						} else {
// 							modify(str1, "finalConclusion", "homozygous recessive");
// 							modify(str2, "finalConclusion", "homozygous dominant");
// 							// Capture which phenotypes are dominant or recessive
// 							modify(prob, "dominantPhenotype", str2.phenotype);
// 							modify(prob, "recessivePhenotype", str1.phenotype);
// 						}
// 					} else {
// 					}
// 					break;
// 			}
// 		}

// 		modify(prob, "curCross", null);
// 		retract(c);
// 		modify(prob, "subgoal", "makeInferences");

// 		// halt();
// 	}
// } // End dummyInferFromCrossRule


// Notes re dummyInferFromCrossRule
// 1. You are going to have a set of rules, based on your cognitive task analysis, that all
//		follow this same patterns
// 2. These rules are strict alternatives in that for any cross, only one applies.
//
// Questions to help your understanding
// 1. What's the critical difference  between subgoal inferFromCross and subgoal 
//		makeInference?



rule makeAdditionalInference 
{
 when
 {
   prob : Problem prob.subgoal == "makeInferences" && prob.recessivePhenotype {recessivePhenotype : recessiveName};
   str1 : Strain !str1.finalConclusion && str1.phenotype == recessiveName;
 }
 then
 {
    modify(str1,"finalConclusion","homozygous recessive"); 
 }
}

rule makeInferences {
	when {
		prob: Problem prob.subgoal == "makeInferences";
		str1: Strain !str1.finalConclusionWritten && !str1.finalConclusion && str1.partialConclusions.length > 0 && prob.dominantPhenotype;
	} then {
		let lastPartialConclusion = str1.partialConclusions[str1.partialConclusions.length - 1];
		switch (lastPartialConclusion) {
			case 'homozygous':
				if (prob.dominantPhenotype == str1.phenotype) {
					modify(str1, "finalConclusion", "homozygous dominant");
				} else {
					modify(str1, "finalConclusion", "homozygous recessive");
				}
				break;
			case 'homozygous recessive or heterozygous':
				if (prob.dominantPhenotype == str1.phenotype) {
					modify(str1, "finalConclusion", "heterozygous");
				} else {
					modify(str1, "finalConclusion", "homozygous recessive");
				}
				break;
		}
	}
}

rule inferFinalFromBothPartials 
{
	when
	{
      prob: Problem prob.subgoal == "makeInferences";
      str1 : Strain !str1.finalConclusion && "homozygous recessive or heterozygous" in str1.partialConclusions && "homozygous" in str1.partialConclusions;
	}
	then
	{
      modify(str1, "finalConclusion","homozygous recessive");
      modify(prob, "recessivePhenotype", str1.phenotype);
      if (str1.phenotype == prob.phenotypes[0]) {
      	modify(prob, "dominantPhenotype", prob.phenotypes[1]);
      } else {
		modify(prob, "dominantPhenotype", prob.phenotypes[0]);
      }

	}
}

//--------------------------------------------------------------------------------------------
//
// Rules for the makeInferences subgoal
//
// You will need to write more rules for this subgoal,  based on your cognitive task analysis.
//
//--------------------------------------------------------------------------------------------
rule enterFinalInference {
	salience: 1;
	when {
		prob: Problem prob.subgoal == "enterInferences";
		str1: Strain str1.finalConclusion && !str1.finalConclusionWritten;
	}
	then {
		if (checkSAI({selection: str1.ieFinalConclusion, action: "UpdateComboBox", input: str1.finalConclusion})) {
			modify(str1, "finalConclusionWritten", true);
			halt();
		} else {
			backtrack();
		}
	}
}

rule enterPartialInference {
	salience: 1;
	when {
		prob: Problem prob.subgoal == "enterInferences";
		str1: Strain str1.needToWritePartialConclusion;
	}
	then {
		if (checkSAI({selection: str1.iePartialConclusions, action: "UpdateComboBox", input: str1.partialConclusions[str1.partialConclusions.length -1 ]})) {
			modify(str1, "needToWritePartialConclusion", false);
			halt();
		} else {
			backtrack();
		}
	}
}




// doneInferencing
// IF we have a makeInferences subgoal
// THEN move on to the enterInferences subgoal
//
rule doneInferencing {
	salience: -5;         //  critical!!
	when {
		prob: Problem prob.subgoal === "makeInferences";
	}
	then {
		modify(prob, "subgoal", "enterInferences");
		halt();
	}
}
// Notes re dummyInferFromCrossRule
// 1. This is NOT a dummy rule; i.e., this rule will be needed in the final version of 
//		your model
// Questions to help your understanding
// 1. Why is this rule needed?
// 2. Why is it critical that is has low salience? (This may be more clear when you  have 
//		additional rules, but perhaps you can already see why before you write those rules.)

//--------------------------------------------------------------------------------------------
//
// Rules for the enterInferences subgoal
//
// You will need to write more rules for this subgoal.
//
//--------------------------------------------------------------------------------------------

// Notes doneWithMandatoryInput
// IF we have an enterInferences subgoal
//    AND we do not have a strain with a final conclusion that has not been written
//    AND we do not have a strain with one or more partial conclusions that have not
//           been written, unless a full conclusion has been written for that strain
// THEN
//    Move on to the selectCross subgoal

rule doneWithMandatoryInput {
	salience: -5;
	when {
		prob: Problem prob.subgoal === "enterInferences";
		not(s: Strain s.finalConclusion && !s.finalConclusionWritten);
		not(s: Strain s.partialConclusions.length > 0 && s.needToWritePartialConclusion && !s.finalConclusionWritten);
	}
	then {
		modify(prob, "subgoal", "selectCross");
		// halt();
	}
}
// Notes doneWithMandatoryInput
// 1. Rule uses "not" on the rhs.
// 2. Small subtlety:   It is OK to not write a partial conclusion, for a given strain, if
//		there is a final conclusion for that same strain. (It sometimes happens that
//		following a cross, both a partial concluson and a  final conclusion are inferred,
//		both for the same strain.
//
// Questions to help your understanding
// 1. How does this rule help ensure that the student can enter the next cross only after
//		all inferences for the current cross have been entered?
//

//--------------------------------------------------------------------------------------------
//
// Done rule
//
// You will need to write a done rule.
//
//--------------------------------------------------------------------------------------------

// Note: Should the done rule test for a specific subgoal?  Which subgoal?

rule done {
	when {
		not(s: Strain !s.finalConclusionWritten);
	}
	then {
		if (checkSAI({selection: 'done', action: 'ButtonPressed', input: -1})) {
			halt();
		} else {
			backtrack();
		}
	}
}